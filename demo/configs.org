#+SETUPFILE: setup.org
#+TITLE: All Configs in One File

* notes
#+BEGIN_COMMENT
1. tags, secret
2. left, right aligned image
3. tab pages
#+END_COMMENT

* accounts info

** intro

Of course you can't see it.

- Get passwords: [[http://passwordsgenerator.net/][Secure Password Generator]]
- my GPG pubkey: [[http://keys.gnupg.net:11371/pks/lookup?op=vindex&search=TANG+ZhiXiong&fingerprint=on][Search results for 'zhixiong tang']]
- =(org-sort-entries)=, then =a[lpha]=

** this part is only for me                                          :secret:

secret parts.

* qiniu

** qrsync configs

- command line syncing tool, like =rsync= but works with qiniu remote
  bucket
- several qrsync json configuration files, tangled to =~/conf/=
- usage, for example: =qrsync ~/conf/sob.json=

Put this in our =.emacs.d/init.el=

#+BEGIN_EXAMPLE emacs-lisp
(load "~/.emacs.d/tzx-conf.el")
#+END_EXAMPLE

and tangle out this file to =~/.emacs.d/tzx-conf.el=

#+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/tzx-conf.el
  ;; DON't edit this file, it's tangled out by emacs
  ;; edit it from github:district10:orgit repo.
  ;; and use C-[cvt] to tangle out the code
  ;; e.g. #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/tzx-conf.el

  ;; org-mode export settings
  (global-set-key (kbd "C-c c") 'org-capture)
  (setq org-html-htmlize-output-type 'css)
  (setq org-html-htmlize-font-prefix "org-")

  ;; pgp encrpytion
  (require 'org-crypt)
  (org-crypt-use-before-save-magic)
  (setq org-crypt-tag-matcher "secret")
  (setq org-tags-exclude-from-inheritance (quote ("secret")))
  (setq org-crypt-key "TANG ZhiXiong")

  ;; plant uml jar path
  (setq org-plantuml-jar-path "~/bin/plantuml.jar")

  ;; org-babel
  (org-babel-do-load-languages
    'org-babel-load-languages
    '((C . t)
      (ruby . t)
      (ditaa . t)
      (dot . t)
      (emacs-lisp . t)
      (java . t)
      (js . t)
      (perl . t)
      (plantuml . t)
      (python . t)
      (matlab . t)
      ;; (R . t)
      (sh . t)))
  (setq org-confirm-babel-evaluate nil)
#+END_SRC

** encription

  #+BEGIN_EXAMPLE
    $ gpg --gen-key
    $ gpg --list-keys
    $ gpg --armor --output public-key.txt --export <user-id>
    $ gpg --armor --output private-key.txt --export-secret-keys
    $ gpg --import private-key.txt
    $ gpg --keyserver hkp://keys.gnupg.net --search-keys "TANG ZhiXiong"
    gpg: searching for "TANG ZhiXiong" from hkp server keys.gnupg.net
    (1)   TANG ZhiXiong <dvorak4tzx@qq.com>
              2048 bit RSA key F071D6FE, created: 2016-02-08
    Keys 1-1 of 1 for "TANG ZhiXiong".  Enter number(s), N)ext, or Q)uit > 1
    gpg: requesting key F071D6FE from hkp server keys.gnupg.net
    gpg: key F071D6FE: "TANG ZhiXiong <dvorak4tzx@qq.com>" not changed
    gpg: Total number processed: 1
    gpg:              unchanged: 1
  #+END_EXAMPLE

  add the tag: =C-[c {q/c}] secret RET=

** decryption

=org-decrypt-entry=

** babel
** code examples
*** TODO rules
*** graphics
**** [[http://ditaa.sourceforge.net][ditaa]]
**** [[http://graphviz.org/][Graphviz]]
**** [[http://plantuml.com/][PlantUML]]

*** general

#+HEADER: :exports both
#+HEADER: :var mystring="Sunday" :var myint=145 :var mydouble=3.14 :exports both
#+HEADER: :includes '(<vector> <numeric> <iostream> <sstream>)
#+HEADER: :flags -std=c++11
#+BEGIN_SRC C++
  inline void build_string(std::ostream& o) {}

  template<class First, class... Rest>
  inline void build_string(std::ostream& o, const First& value, const Rest&... rest) {
      o << value;
      build_string(o, rest...);
  }

  template<class... T>
  std::string concat_string(const T&... value) {
      std::ostringstream o;
      build_string(o, value...);
      return o.str();
  }

  int main(void ) {
      printf ("mystring %s\n", mystring);
      printf ("myint    %d\n", myint);
      printf ("mydouble %g\n", mydouble);

      int a = [](){ return 2; }();
      int b = 5;
      printf("a + b: %d\n", a+b);

      std::vector<int> v( 100 );
      std::iota( std::begin( v ), std::end( v ), 0 );
      std::cout << v[7] << std::endl;

      int year = 2016;
      int month = 2;
      int day = 18;
      std::string date_string = concat_string(year, '-', month, '-', day);
      std::cout << date_string << std::endl;
      return 0;
  }
#+END_SRC

#+RESULTS:
| mystring  | Sunday |    |   |
| myint     |    145 |    |   |
| mydouble  |   3.14 |    |   |
| a         |      + | b: | 7 |
| 7         |        |    |   |
| 2016-2-18 |        |    |   |

besides =C=, =C++=, also supports:

- emacs lisp
- python
- R
- javascript
- etc

- =:cmdline= :: confs for executable
- =:flags= :: compiler
- =:main= :: "no" to prevent default wrapping
- =:includes= :: C && C++ only
- =:defines= :: C & C++ only

*** multi languages
**** ruby

  #+header: :exports both
  #+BEGIN_SRC ruby
    require 'date'
    "This file was last evaluated on #{Date.today}"
  #+END_SRC

  #+RESULTS:
  : This file was last evaluated on 2016-02-18

**** shell

#+HEADER: :exports both
#+BEGIN_SRC sh
  echo "This file takes up `du -h configs.org | sed 's/\([0-9k]*\)[ ]*configs.org/\1/'`"
#+END_SRC

#+RESULTS:
: This file takes up 4.0K

**** java

#+HEADER :exports both
#+HEADER :flags HelloWorld
    #+BEGIN_SRC java
      public class HelloWorld {
          public static void main( String[] args ) {
              System.out.println( "Hello, World!" );
          }
      }
    #+END_SRC

**** R

  - install R on linux: =sudo apt-get install r-base r-base-dev=
  - run R repl: =R=
  - install R package: =R CMD INSTALL <package-name>=

  #+BEGIN_SRC R :exports both
  sqrt(42)
  #+END_SRC

   #+BEGIN_SRC R :colnames yes
    words <- tolower(scan("imurfather.org", what="", na.strings=c("|",":")))
    t(sort(table(words[nchar(words) > 3]), decreasing=TRUE)[1:10])
  #+END_SRC

  #+RESULTS:
  | #+begin_src | #+end_src | :exports | #+results: | both | todo | code | message----- | your | 9.05 |
  |-------------+-----------+----------+------------+------+------+------+--------------+------+------|
  |           8 |         8 |        6 |          6 |    5 |    5 |    4 |            4 |    4 |    3 |

* system configs
** TODO zsh

#+BEGIN_SRC emacs-lisp :tangle ~/.zshrc
  # don't edit this file, it's tangled by emacs.
  export ZSH=/home/tzx/.oh-my-zsh
  ZSH_THEME="robbyrussell"
  HIST_STAMPS="yyyy-mm-dd"
  plugins=(git colored-man-pages)
  export PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"

  # export MANPATH="/usr/local/man:$MANPATH"
  source $ZSH/oh-my-zsh.sh
  # export LANG=en_US.UTF-8

  if [[ -n $SSH_CONNECTION ]]; then
    export EDITOR='vim'
  else
    export EDITOR='vim'
  fi

  # eval $(thefuck --alias)
  alias get='sudo apt-get install'

  alias ems='emacs --daemon'
  alias emx='emacsclient -e "(kill-emacs)"'
  alias ec='emacsclient -t'
  alias ect='emacsclient -t'
  alias ecc='emacsclient -c'

  alias tig='git commit -am "lazy commit" && git push'
  alias win='sudo mount -t vboxsf -o uid=1000,gid=1000 shared /home/tzx/shared/'
  alias cbd='killall VBoxClient && VBoxClient-all'
  alias clip="xclip -selection clipboard"

  alias crop="scrot"

  alias gall="git add -A && git commit -m \"lazy commit\" && git push"
  alias gal="git add -A && git commit -m \"lazy commit\""
  alias neo="cd ~/bin && ./neo.sh"
  alias mod="vim ~/.zshrc && source ~/.zshrc"
  alias search="sudo apt-cache search"

  alias git=hub

  PATH="/home/tzx/bin/node-v4.3.1-linux-x86/bin:/home/tzx/bin:$PATH"
#+END_SRC

* Footnotes

#+INCLUDE: footer.org
